name: Auto Merge Main to Backend & Frontend

on:
  push:
    branches:
      - main

jobs:
  merge-branches:
    name: Merge Main into Backend & Frontend
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history for merge

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Merge Main into master-backend
        id: merge_backend
        run: |
          git checkout master-backend
          git merge --no-ff main || echo "conflict" >> $GITHUB_ENV

      - name: Push Merge to master-backend
        if: success() && env.conflict != 'conflict'
        run: git push origin master-backend

      - name: Create PR for master-backend if conflicts exist
        if: env.conflict == 'conflict'
        uses: peter-evans/create-pull-request@v6
        with:
          branch: master-backend
          base: main
          title: "Resolve conflicts: Merge main into master-backend"
          body: "Conflicts detected. Resolve and merge manually."
          labels: "auto-merge"

      - name: Merge Main into master-frontend
        id: merge_frontend
        run: |
          git checkout master-frontend
          git merge --no-ff main || echo "conflict" >> $GITHUB_ENV

      - name: Push Merge to master-frontend
        if: success() && env.conflict != 'conflict'
        run: git push origin master-frontend

      - name: Create PR for master-frontend if conflicts exist
        if: env.conflict == 'conflict'
        uses: peter-evans/create-pull-request@v6
        with:
          branch: master-frontend
          base: main
          title: "Resolve conflicts: Merge main into master-frontend"
          body: "Conflicts detected. Resolve and merge manually."
          labels: "auto-merge"
